@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<h1>Creating the Sequence</h1>

<!-- Entering integers -->
<form id="integerForm">
    <div class="mb-2">
        
        <input 
            id="integerInput"
            type="text"
            oninput="this.value = this.value.replace(/(?!^)-|[^0-9-]/g, '')" 
            onkeypress="if(event.keyCode === 13) { addIntegerToSequence(); return false; }" />
        <!-- Regex prevents input of non-integers -->
        <!-- Can use Enter to add-->

        <button type="button" onclick="addIntegerToSequence()">Add</button>
    </div>
</form>

    <div id="integerButtonContainer">
        <!-- Number buttons are added here -->
    </div>

    <!-- Sorting Options -->
    <h1 class="mt-5">Sorting Options</h1>
    <button type="button" class="btn btn-secondary" id="sortAscendingButton">Sort Ascending</button>
    <button type="button" class="btn btn-secondary" id="sortDescendingButton">Sort Descending</button>
    <div>
        <p class="mt-2"><b>Sort Time: </b><span id="timeTaken">A sequence needs integers before it can be sorted.</span></p>
    </div>

    <!-- Saving -->
    <h1 class="mt-5">Save to the Database</h1>
    <button type="button" class="btn btn-secondary" id="saveButton" onclick="save()">Save</button>


<!-- JavaScript -->
<script>
    let intCount = 0;
    let sequenceIsSorted = false;
    let sequenceIsAscending = true;
    let timeTaken = 0;

    // Identify the buttons
    const sortAscendingButton = document.getElementById("sortAscendingButton");
    const sortDescendingButton = document.getElementById("sortDescendingButton");
    const saveButton = document.getElementById("saveButton");
    
    neutraliseSortState();

    // Sorts on click - ASCENDING
    sortAscendingButton.addEventListener("click", function() {
        // Sort in ascending order
        if (intCount > 0) {
            // Make selected button green
            sortAscendingButton.classList.add("btn-success");
            saveButton.classList.add("btn-success");
            sortDescendingButton.classList.remove("btn-success");
            // Set state and perform sort
            sequenceIsSorted = true;
            sequenceIsAscending = true;
            sortBadges(true);
        }
        else{
            // Reset colours
            neutraliseSortState();
        }
    });

    // Sorts on click - DESCENDING
    sortDescendingButton.addEventListener("click", function () {
        // Sort in descending order
        if (intCount > 0) {
            // Make selected button green
            sortAscendingButton.classList.remove("btn-success");
            saveButton.classList.add("btn-success");
            sortDescendingButton.classList.add("btn-success");
            // Set state and perform sort
            sequenceIsSorted = true;
            sequenceIsAscending = false;
            sortBadges(false);
        }
        else {
            // Reset colours
            neutraliseSortState()
        }
    });

    // Resets colours and state to show sequence is unsorted
    function neutraliseSortState() {

        // Reset sorting button colours
        sortAscendingButton.classList.remove("btn-success");
        sortDescendingButton.classList.remove("btn-success");
        saveButton.classList.remove("btn-success");

        sequenceIsSorted = false;
    }

    // No time taken - empty sequence
    function emptySequenceMessage() {
        document.getElementById("timeTaken").textContent = "A sequence needs integers before it can be sorted";
    }

    // No time taken - unsorted
    function modifiedSequenceMessage() {
        document.getElementById("timeTaken").textContent = "Please select Ascending or Descending to sort the sequence";
    }

    // Submits POST
    // Convert data and send via AJAX
    function save() {

        const integerButtons = Array.from(document.querySelectorAll('[id="integerButton"'));

        // Validate the data
        if (integerButtons.length == 0) {
            alert("Sequences must have at least one integer.")
        }
        else if (!sequenceIsSorted) {
            alert("Sequences must be sorted before saving.")
        }
        else {
            const sequenceArray = integerButtons.map(button => parseInt(button.textContent));

            // Serialise the data into JSON
            var data = JSON.stringify({
                Sequence: sequenceArray,
                IsAscending: sequenceIsAscending,
                SortingTime: timeTaken
            });

            $.ajax(
            {
                url: '/Sequence/Create',
                method: 'POST',
                contentType: 'application/json',
                data: data,
                success: function (response) 
                {
                    // Success response
                    window.location.href = '/Sequence/Index';
                },
                error: function (xhr, status, error) 
                {
                    // Error
                    if (xhr.status === 400) {
                        // ModelState error
                        var errors = xhr.responseJSON;
                        alert("Error: " + JSON.stringify(errors));
                    } else {
                        // Other error
                        alert("Error: " + error);
                    }
                }
            });
        }
    }

    // Sorts the order of the numbers in the current sequence
    function sortBadges(asc) {
        const integerButtons = document.querySelectorAll('[id="integerButton"');

        // Array of integers, for more efficient sorting
        const integerArray = Array.from(integerButtons).map(button => parseInt(button.textContent));

        // Time taken can vary significantly, and sometimes too small to measure
        // Take average
        let totalTime = 0;
        let iterations = 1000;
        for (let i = 0; i < iterations; i++) {
            // Shuffle (as sorted list takes less time to sort)
            integerArray.sort(() => Math.random() - 0.5);

            // Sort and measure time
            let start = performance.now();
            if (asc) {
                integerArray.sort((num1, num2) => {
                    return num1 - num2;
                });
            }
            else {
                integerArray.sort((num1, num2) => {
                    return num2 - num1;
                });
            }

            let elapsed = performance.now() - start;
            totalTime += elapsed;
        }
        let averageTime = totalTime / iterations;
        timeTaken = averageTime.toFixed(3);

        // Display the time taken
        let showTimeTaken = document.getElementById("timeTaken");
        showTimeTaken.textContent = timeTaken + " milliseconds";

        // Reform the array into buttons
        const integerButtonContainer = document.getElementById('integerButtonContainer');
        integerButtonContainer.innerHTML = ''; // Clear existing badges
        integerArray.forEach(intValue => addIntegerButton(intValue)); // Add new ones in order


    }

    // Accepts user input of integers
    // Adds them to the sequence
    function addIntegerToSequence() {
        var integerInput = document.getElementById("integerInput");
        var integer = parseInt(integerInput.value);

        // Check if input is a valid number
        if (isNaN(integer)) {
            alert("Please enter a valid number.");
            return;
        }
        else if (integer > 2147483647) {
            alert("Integer too large.");
            return;
        } else if (integer < -2147483648) {
            alert("Integer too small.");
            return;
        }

        // Sequence may be out of order now
        // Remove sorting time, and replace with note
        neutraliseSortState();
        modifiedSequenceMessage();
        listIsSorted = false;
        
        // Add number, update state
        addIntegerButton(integer);
        intCount++;

        // Clear the input field after adding the number
        integerInput.value = "";
    }

    // Adds the button representing a number in the sequence
    function addIntegerButton(intValue) {
        // Create a button element
        var integerButton = document.createElement("button");
        integerButton.classList.add("btn", "btn-primary", "bg-primary", "me-2");
        integerButton.id = "integerButton";
        integerButton.textContent = intValue;
        integerButton.style.cursor = "pointer";
        integerButton.onclick = function () 
        {
            // Clicking on number removes it
            this.remove();
            intCount--;
            neutraliseSortState();
            if (intCount == 0) {
                emptySequenceMessage();
            } else {
                modifiedSequenceMessage();
            }
        };

        // Append the tile to the tile container
        var buttonContainer = document.getElementById("integerButtonContainer");
        buttonContainer.appendChild(integerButton);
    }
</script>

