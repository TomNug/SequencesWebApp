@model List<int>
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<h1>Creating the Sequence</h1>
<form method="post" id="integerForm">
    <div id="integerInputs" class="mb-2">
        <input id="integerInput" type="number" />
        <button type="button" onclick="addInteger()">Add</button>
    </div>
    
    <div id="numberButtonContainer">
    <!-- Number buttons are added here -->
</div>

    <h1>Sorting Options</h1>
    
    <button type="button" class="btn btn-secondary" id="sortAscendingButton">Sort Ascending</button>
    <button type="button" class="btn btn-secondary" id="sortDescendingButton">Sort Descending</button>
    <div>
        <h2>Sort Time</h2>
        <p id="timeTaken"></p>
    </div>
    <h1>Sequence</h1>
    <p id="showSequence"> </p>

    <button type="button" class="btn btn-secondary" id="saveButton" onclick="save()">Save Sequence</button>
</form>

<script>
    let numCount = 0;
    let sequenceIsSorted = false;
    let sequenceIsAscending = true;
    let timeTaken = 0;

    // Identify the sorting buttons
    const sortAscendingButton = document.getElementById("sortAscendingButton");
    const sortDescendingButton = document.getElementById("sortDescendingButton");
    neutraliseSortState();

    // Sorts on click - ASCENDING
    sortAscendingButton.addEventListener("click", function() {
        // Sort in ascending order
        if (numCount > 0) {
            // Make selected button green
            sortAscendingButton.classList.add("btn-success");
            sortDescendingButton.classList.remove("btn-success");
            sequenceIsSorted = true;
            sequenceIsAscending = true;
            sortBadges(true);
        }
        else{
            // Reset colours
            neutraliseSortState();
            
        }
    });

    // Sorts on click - DESCENDING
    sortDescendingButton.addEventListener("click", function () {
        // Sort in descending order
        if (numCount > 0) {
            // Make selected button green
            sortAscendingButton.classList.remove("btn-success");
            sortDescendingButton.classList.add("btn-success");
            sequenceIsSorted = true;
            sequenceIsAscending = false;
            sortBadges(false);
        }
        else {
            // Reset colours
            neutraliseSortState()
        }
    });

    function neutraliseSortState() {

        // Reset sorting button colours
        sortAscendingButton.classList.remove("btn-success");
        sortDescendingButton.classList.remove("btn-success");
    }

    function emptySequenceMessage() {
        document.getElementById("timeTaken").textContent = "A sequence needs integers before it can be sorted";
    }

    function modifiedSequenceMessage() {
        document.getElementById("timeTaken").textContent = "Please select Ascending or Descending to sort the sequence";
    }
    // Submits POST
    // Convert data and send via AJAX
    function save() {

        //######
        // NEED TO CHECK IF IT'S A VALID LIST
        //#########
        const numberButtons = Array.from(document.querySelectorAll('[id="numberButton"'));
        const sequenceArray = numberButtons.map(button => parseInt(button.textContent));

        // Serialise the data into JSON
        var data = JSON.stringify({ 
            Sequence: sequenceArray,
            IsAscending: sequenceIsAscending,
            SortingTime: timeTaken
        });

        fetch("/Sequence/Create", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
        .then(response => {
            alert("data sent successfully");
        })
        .catch(error => {
            alert("Error: " + error);
        });
    }

    // Sorts the order of the numbers in the current sequence
    function sortBadges(asc) {
        const numberButtons = document.querySelectorAll('[id="numberButton"');
        //const numberButtonsArray = Array.from(numberButtons);
        // Array of integers, for more efficient sorting
        const integerArray = Array.from(numberButtons).map(button => parseInt(button.textContent));

        // Time taken can vary significantly, and sometimes too small to measure
        // Take average
        let totalTime = 0;
        let iterations = 1000;
        for (let i = 0; i < iterations; i++) {
            // Shuffle (as sorted list takes less time to sort)
            integerArray.sort(() => Math.random() - 0.5);

            // Sort and measure time
            let start = performance.now();
            if (asc) {
                integerArray.sort((num1, num2) => {
                    return num1 - num2;
                });
            }
            else {
                integerArray.sort((num1, num2) => {
                    return num2 - num1;
                });
            }

            let elapsed = performance.now() - start;
            totalTime += elapsed;
        }
        let averageTime = totalTime / iterations;
        timeTaken = averageTime.toFixed(3);

        // Display the time taken
        let showTimeTaken = document.getElementById("timeTaken");
        showTimeTaken.textContent = timeTaken + " milliseconds";

        // Reform the array into buttons
        const numberButtonContainer = document.getElementById('numberButtonContainer');
        numberButtonContainer.innerHTML = ''; // Clear existing badges
        integerArray.forEach(intValue => addNumberButton(intValue));


    }
    function addInteger() {
        var numberInput = document.getElementById("integerInput");
        var number = parseInt(numberInput.value);


        // MAKE SURE IT'S AN INTEGER #############################
        // Check if input is a valid number
        if (isNaN(number)) {
            alert("Please enter a valid number.");
            return;
        }
        neutraliseSortState();
        // Remove sorting time, and replace with note
        modifiedSequenceMessage();
        //sequence.push(number);
        //let showSequence = document.getElementById("showSequence");
        // Set the text content of the <p> tag to the value of the sequence variable
        //showSequence.textContent = "Sequence: " + sequence.join(", ");
        addNumberButton(number);

        listIsSorted = false;
        numCount++;

        // Clear the input field after adding the number
        numberInput.value = "";
    }

    function addNumberButton(intValue) {
        // Create a button element
        var numberButton = document.createElement("div"); // DIV?
        numberButton.classList.add("btn", "btn-primary", "bg-primary", "me-2");
        numberButton.id = "numberButton";
        numberButton.textContent = intValue;
        numberButton.style.cursor = "pointer";
        numberButton.onclick = function () {
            //let number = parseInt(this.textContent.toString())
            //sequence.splice(sequence.indexOf(number), 1);
            //let showSequence = document.getElementById("showSequence");
            // Set the text content of the <p> tag to the value of the sequence variable
            //showSequence.textContent = "Sequence: " + sequence.join(", ");
            this.remove();
            numCount--;
            if (numCount == 0) {
                neutraliseSortState();
                emptySequenceMessage();
            }
        };

        // Append the tile to the tile container
        var buttonContainer = document.getElementById("numberButtonContainer");
        buttonContainer.appendChild(numberButton);
    }
</script>

